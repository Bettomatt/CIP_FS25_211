import pandas as pd
import matplotlib.pyplot as plt
import glob
import os

# Define the path and get all json files
path = "data/clean-dataset/"
all_files = glob.glob(os.path.join(path, "clean_*.json"))

# Read all files and concatenate into one DataFrame
dfs = []
for file in all_files :
    # Each JSON file contains one JSON per line
    df = pd.read_json(file, lines=True)
    dfs.append(df)

data = pd.concat(dfs, ignore_index=True)

# Convert date columns to datetime objects
data['date'] = pd.to_datetime(data['date'])
data['planned_arrival'] = pd.to_datetime(data['planned_arrival'])
data['real_arrival'] = pd.to_datetime(data['real_arrival'])

# Preview the data
print(data.head())
summary = data.describe()

# %%% Use IQR (Interquartile Range) Method to filter out statistical outliers.

def remove_outliers(df, col, multiplier=1.5):
    # Remove outliers from a DataFrame column based on the IQR method.
    q1 = df[col].quantile(0.25)
    q3 = df[col].quantile(0.75)
    iqr = q3 - q1
    lower_bound = q1 - multiplier * iqr
    upper_bound = q3 + multiplier * iqr
    return df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]

# Use the function to remove outliers in arrival_delay_min
data_clean_iqr = remove_outliers(data, 'arrival_delay_min')

# Optional: Inspect the cleaned data statistics
print("\nAfter cleaning with IQR:")
print(data_clean_iqr['arrival_delay_min'].describe())

# Create a boxplot grouped by date using pandas' built-in functionality.
plt.figure(figsize=(12,6))
data_clean_iqr.boxplot(column='arrival_delay_min', by='date', grid=False)
plt.title("Arrival Delay per Day (IQR Cleaned Data)")
plt.xlabel("Date")
plt.ylabel("Arrival Delay (min)")
plt.xticks(rotation=45)
plt.suptitle('')  # Removes the default subtitle generated by pandas
plt.tight_layout()
plt.show()

# %%% Time Series of Arrival Delays
"""
This time series plot connects the delay data over the dates present, giving a clear visual of when delays tend to spike or drop.
"""
plt.figure(figsize=(12,6))
plt.plot(data['date'], data['arrival_delay_min'], marker='o', linestyle='-', label='Delay (min)')
plt.title("Arrival Delay Over Time")
plt.xlabel("Date")
plt.ylabel("Arrival Delay (min)")
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Limit Arrival Delay to 0 - 250
plt.figure(figsize=(12,6))
plt.plot(data['date'], data['arrival_delay_min'], marker='o', linestyle='-', label='Delay (min)')
plt.title("Arrival Delay Over Time")
plt.xlabel("Date")
plt.ylabel("Arrival Delay (min)")
plt.ylim(0, 250)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# %%% Histogram of Arrival Delay Distribution
plt.figure(figsize=(10,6))
plt.hist(data['arrival_delay_min'], bins=300, edgecolor='black')
plt.title("Distribution of Arrival Delays")
plt.xlabel("Arrival Delay (min)")
plt.ylabel("Frequency")
plt.xlim(-20, 20)
plt.tight_layout()
plt.show()

# %%% Scatter Plot – Weather vs. Arrival Delay
plt.figure(figsize=(10,6))
plt.scatter(data['temperature_2m'], data['arrival_delay_min'], alpha=0.7)
plt.title("Arrival Delay vs Temperature")
plt.xlabel("Temperature (°C)")
plt.ylabel("Arrival Delay (min)")
plt.tight_layout()
plt.show()

# %%% Comparing Planned vs. Real Arrival Times (not usable)
plt.figure(figsize=(10,6))
plt.scatter(data['planned_arrival'], data['real_arrival'], alpha=0.7)
plt.title("Planned vs Real Arrival Times")
plt.xlabel("Planned Arrival Time")
plt.ylabel("Real Arrival Time")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# %%% Box Plot of Arrival Delays by Day of the Week
# Extract the day of the week as a new column
data['weekday'] = data['date'].dt.day_name()

plt.figure(figsize=(10,6))
# Create a box plot for arrival delays grouped by weekday
data.boxplot(column='arrival_delay_min', by='weekday', grid=False)
plt.title("Arrival Delay by Day of the Week")
plt.suptitle("")  # Remove default subtitle
plt.xlabel("Day of the Week")
plt.ylabel("Arrival Delay (min)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
