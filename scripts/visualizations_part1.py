import pandas as pd
import matplotlib.pyplot as plt
import glob
import os

########################################################################################################
# Pre-processing
########################################################################################################
# Define the path and get all json files
path = "data/clean-dataset/"
all_files = glob.glob(os.path.join(path, "clean_*.json"))

# Read all files and concatenate into one DataFrame
dfs = []
for file in all_files :
    # Each JSON file contains one JSON per line
    df = pd.read_json(file, lines=True)
    dfs.append(df)

data = pd.concat(dfs, ignore_index=True)

# Convert date columns to datetime objects
data['date'] = pd.to_datetime(data['date'])
data['planned_arrival'] = pd.to_datetime(data['planned_arrival'])
data['real_arrival'] = pd.to_datetime(data['real_arrival'])

# Preview the data
print(data.head())
summary = data.describe()

# %%% Use IQR (Interquartile Range) Method to filter out statistical outliers.

def remove_outliers(df, col, multiplier=1.5):
    # Remove outliers from a DataFrame column based on the IQR method.
    q1 = df[col].quantile(0.25)
    q3 = df[col].quantile(0.75)
    iqr = q3 - q1
    lower_bound = q1 - multiplier * iqr
    upper_bound = q3 + multiplier * iqr
    return df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]

# Use the function to remove outliers in arrival_delay_min
data_clean_iqr = remove_outliers(data, 'arrival_delay_min')

# Optional: Inspect the cleaned data statistics
print("\nAfter cleaning with IQR:")
print(data_clean_iqr['arrival_delay_min'].describe())

# Create a boxplot grouped by date
plt.figure(figsize=(12,6))
data_clean_iqr.boxplot(column='arrival_delay_min', by='date', grid=False)
plt.title("Arrival Delay per Day (IQR Cleaned Data)")
plt.xlabel("Date")
plt.ylabel("Arrival Delay (min)")
plt.xticks(rotation=45)
plt.suptitle('')  # Removes the default subtitle generated by pandas
plt.tight_layout()
plt.show()

#%%% Clean identified columns from NaN values
print(data_clean_iqr[['arrival_delay_min', 'temperature_2m', 'precipitation', 'snowfall', 'wind_speed_10m', 'cloudcover', 'weathercode']].isna().sum())
"""
Example:
arrival_delay_min        0
temperature_2m       10283
precipitation        10283
snowfall             10283
wind_speed_10m       10283
cloudcover           10283
weathercode          10283
"""
data_no_nan = data_clean_iqr.dropna(subset=['arrival_delay_min', 'temperature_2m', 'precipitation', 'snowfall', 'wind_speed_10m', 'cloudcover', 'weathercode'])

########################################################################################################
# First visualizations to explore the data
########################################################################################################
# %%% Heat Map: Arrival Delay vs Temperature
print(data_no_nan['temperature_2m'].describe())

plt.figure(figsize=(10, 6))
hb = plt.hist2d(data_no_nan['temperature_2m'], data_no_nan['arrival_delay_min'], bins=50, cmap='viridis')
plt.colorbar(hb[3], label='Number of Observations')
plt.title("Heatmap of Arrival Delay vs Temperature")
plt.xlabel("Temperature (Â°C)")
plt.ylabel("Arrival Delay (min)")
plt.tight_layout()
plt.show()

# %%% Heat Map: Arrival Delay vs Precipitation
print(data_no_nan['precipitation'].describe())

# to find missing days
data_no_nan.boxplot(column='precipitation', by='date', grid=False)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
hb = plt.hist2d(data_no_nan['precipitation'], data_no_nan['arrival_delay_min'], bins=50, cmap='viridis')
plt.colorbar(hb[3], label='Number of Observations')
plt.title("Heatmap of Arrival Delay vs Precipitation")
plt.xlabel("Precipitation (mm)")
plt.ylabel("Arrival Delay (min)")
plt.tight_layout()
plt.show()
#######################################################################################################
# Boxplot: Precipitation bins in mm (adjust as needed).
# Bin labels must be one fewer than the number of bin edges
bins = [0, 0.02, 0.04, 0.06, 0.08, 0.1, 0.12, 0.14]
labels = ['0-0.02 mm', '0.02-0.04 mm', '0.04-0.06 mm', '0.06-0.08 mm', '0.08-0.10 mm', '0.10-0.12 mm', '0.12-0.14+ mm']

# Create categorical bins
data_no_nan = data_no_nan.copy()
data_no_nan.loc[:, 'precipitation_category'] = pd.cut(
    data_no_nan['precipitation'],
    bins=bins,
    labels=labels,
    include_lowest=True
)

# Create the boxplot:
plt.figure(figsize=(10, 6))

data_no_nan.boxplot(
    column='arrival_delay_min',
    by='precipitation_category',
    grid=False
)

plt.title("Arrival Delay by Snowfall Category")
plt.suptitle("")  # Remove the default subtitle
plt.xlabel("Snowfall Range")
plt.ylabel("Arrival Delay (min)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# %%% Heat Map: Arrival Delay vs Wind Speed (km/h)
print(data_no_nan['wind_speed_10m'].describe())

plt.figure(figsize=(10, 6))
hb = plt.hist2d(data_no_nan['wind_speed_10m'], data_no_nan['arrival_delay_min'], bins=50, cmap='viridis')
plt.colorbar(hb[3], label='Number of Observations')
plt.title("Heatmap of Arrival Delay vs Wind Speed")
plt.xlabel("Wind Speed (km/h)")
plt.ylabel("Arrival Delay (min)")
plt.tight_layout()
plt.show()

# %%% Heat Map: Arrival Delay vs Snowfall (cm)
print(data_no_nan['snowfall'].describe())

plt.figure(figsize=(10, 6))
hb = plt.hist2d(data_no_nan['snowfall'], data_no_nan['arrival_delay_min'], bins=50, cmap='viridis')
plt.colorbar(hb[3], label='Number of Observations')
plt.title("Heatmap of Arrival Delay vs Snowfall")
plt.xlabel("Snowfall (cm)")
plt.ylabel("Arrival Delay (min)")
plt.tight_layout()
plt.show()
#######################################################################################################
# Boxplot: Snowfall bins in cm (adjust as needed).
# Bin labels must be one fewer than the number of bin edges
bins = [-0.01, 0, 0.1, 0.5, 1, 2, 5]
labels = ['0 cm', '0-0.1 cm', '0.1-0.5 cm', '0.5-1 cm', '1-2 cm', '2-5 cm']

# Create categorical bins
data_no_nan = data_no_nan.copy()
data_no_nan.loc[:, 'snowfall_category'] = pd.cut(
    data_no_nan['snowfall'],
    bins=bins,
    labels=labels,
    include_lowest=True
)

# Create the boxplot:
plt.figure(figsize=(10, 6))

data_no_nan.boxplot(
    column='arrival_delay_min',
    by='snowfall_category',
    grid=False
)

plt.title("Arrival Delay by Snowfall Category")
plt.suptitle("")  # Remove the default subtitle
plt.xlabel("Snowfall Range")
plt.ylabel("Arrival Delay (min)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# %%% Box plot of Arrival Delays by day of the week
# Extracts the day of the week as a new column
data_no_nan['weekday'] = data_no_nan['date'].dt.day_name()

plt.figure(figsize=(10,6))
# Creates a box plot for arrival delays grouped by weekday
data_no_nan.boxplot(column='arrival_delay_min', by='weekday', grid=False)
plt.title("Arrival Delay by Day of the Week")
plt.suptitle("")  # Remove default subtitle
plt.xlabel("Day of the Week")
plt.ylabel("Arrival Delay (min)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()




